# Change these first
owner: liquibase # Your GitHub organization or username, where this repository lives
repo: liquibase-io-status # The name of this repository

sites:
  - name: Liquibase IO API
    url: $LIQUIBASE_IO_API_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 7000
  - name: Liquibase IO WEB
    url: $LIQUIBASE_IO_MAIN_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 7000
  - name: Liquibase IO Runner
    url: $LIQUIBASE_IO_RUNNER_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 7000
  - name: Liquibase IO Dispatcher
    url: $LIQUIBASE_IO_DISPATCHER_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 7000
  - name: Liquibase IO Connection Tester
    url: $LIQUIBASE_IO_CONNECTION_TESTER_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 7000

assignees: # Users to assign downtime issues (optional)
  - jandroav

skipDeleteIssues: true

status-website:
  navbar:
    - title: History
      href: /#history
  theme: light
  favicon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.png
  faviconSvg: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
  # Add your custom domain name, or remove the `cname` line if you don't have a domain
  # Uncomment the `baseUrl` line if you don't have a custom domain and add your repo name there
  cname: status.liquibase.io
  # baseUrl: /your-repo-name
  logoUrl: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_white.svg
  name: Status
  introTitle: "Current Status"
  introMessage: "Monitor availability and performance of Liquibase IO"
  js: |
    (function() {
      // Track whether replacements have been applied
      let replacementsApplied = false;

      function addPastIncidentsId() {
        const h2Elements = document.querySelectorAll('h2');
        for (const h2 of h2Elements) {
          if (h2.textContent === 'Past Incidents' || h2.textContent === 'Past Events') {
            h2.id = 'history';
            if (h2.textContent === 'Past Incidents') {
              h2.textContent = 'Past Events';
            }
          }
        }
      }

      function convertDatesToUTC() {
        // Convert dates in dd elements
        const dateElements = document.querySelectorAll('dd');
        dateElements.forEach(el => {
          if (el.innerText.includes('/')) {
            const date = new Date(el.innerText);
            el.innerText = date.toUTCString().replace('GMT', 'UTC');
          }
        });

        // Convert dates in incident headers
        const incidentDivs = document.querySelectorAll('div.f div');
        incidentDivs.forEach(div => {
          const text = div.innerText;
          if (text.includes('Opened at')) {
            const dateStr = text.match(/Opened at (.*?) with/)?.[1];
            if (dateStr) {
              const date = new Date(dateStr);
              div.innerText = text.replace(dateStr, date.toUTCString().replace('GMT', 'UTC'));
            }
          }
        });
      }

      function limitEvents() {
        // Process each type of article separately
        processArticleType('html body div#sapper main.container section article.down.link');
        processArticleType('html body div#sapper main.container section article.link.degraded');

        // Then clean up orphaned H3 headers
        cleanupOrphanedHeaders();
      }

      function processArticleType(selector) {
        const articles = document.querySelectorAll(selector);

        // If we have more than 2 articles, hide all except the first 2 (most recent)
        if (articles.length > 2) {
          const articlesArray = Array.from(articles);
          // Keep first 2 visible
          for (let i = 2; i < articlesArray.length; i++) {
            articlesArray[i].style.display = 'none';
          }
        }
      }

      function cleanupOrphanedHeaders() {
        // Get all H3 date headers
        const dateHeaders = document.querySelectorAll('html body div#sapper main.container section h3');

        dateHeaders.forEach(header => {
          let nextElement = header.nextElementSibling;
          let hasVisibleArticle = false;

          // Check all elements until the next header or until no more siblings
          while (nextElement && nextElement.tagName !== 'H3' && nextElement.tagName !== 'H2') {
            // If it's an article and it's visible, mark this header as having visible content
            if (nextElement.tagName === 'ARTICLE' && nextElement.style.display !== 'none') {
              hasVisibleArticle = true;
              break;
            }
            nextElement = nextElement.nextElementSibling;
          }

          // If no visible articles were found for this date header, hide it
          if (!hasVisibleArticle) {
            header.style.display = 'none';
          } else {
            // Make sure the header is visible if it has visible articles
            header.style.display = '';
          }
        });
      }

      function setupTimeSelector() {
            // Wait for the form to be available
            const checkForm = setInterval(() => {
              const form = document.querySelector('form.f.r');
              if (form) {
                clearInterval(checkForm);
                
                // Select the 24h (day) option
                const dayOption = document.getElementById('data_day');
                if (dayOption) {
                  dayOption.checked = true;
                  
                  // Trigger a change event to update graphs
                  const event = new Event('change', {
                    bubbles: true,
                    cancelable: true
                  });
                  dayOption.dispatchEvent(event);
                }
                
                // Add a class to the form to trigger our CSS hiding other options
                form.classList.add('day-only');
              }
            }, 100);
          }
    
      function removeCheckIcon() {
        // Find all articles with "up" class
        const upArticles = document.querySelectorAll('article.up');
        
        // For each "up" article, remove the check mark emoji if it exists
        upArticles.forEach(article => {
          if (article.innerHTML.includes('✅')) {
            article.innerHTML = article.innerHTML.replace('✅ &nbsp;', '');
          }
        });
      }

      function replaceIncidentsWithEvents() {
        replacementsApplied = false;
        let hasReplaced = false;

        // Find the specific section containing h2 with class svelte-18y4uo2
        const targetH2 = document.querySelector('h2.svelte-18y4uo2');
        if (!targetH2) {
          return false;
        }

        // Find the parent section that contains the h2
        const parentSection = targetH2.closest('section');
        if (!parentSection) {
          return false;
        }

        // Replace text nodes only within this section
        const walker = document.createTreeWalker(
          parentSection,
          NodeFilter.SHOW_TEXT,
          null,
          false
        );

        let textNode;
        while (textNode = walker.nextNode()) {
          if (textNode.nodeValue.includes('Incident')) {
            textNode.nodeValue = textNode.nodeValue.replace(/Incident/g, 'Event');
            hasReplaced = true;
          }
        }

        // Replace in link text only within this section
        const elements = parentSection.querySelectorAll('a[href*="incident"], a[href*="Incident"]');
        elements.forEach(element => {
          if (element.href && element.textContent.includes('Incident')) {
            element.textContent = element.textContent.replace(/Incident/g, 'Event');
            hasReplaced = true;
          }
        });

        // Also replace the h2 text if it contains "Incidents"
        if (targetH2.textContent === 'Past Incidents') {
          targetH2.textContent = 'Past Events';
          hasReplaced = true;
        }

        if (hasReplaced) {
          replacementsApplied = true;
        }

        return hasReplaced;
      }

      // Initial run and setup observer
      function initializePageModifications() {
        // Perform initial modifications
        convertDatesToUTC();
        addPastIncidentsId();
        replaceIncidentsWithEvents();
        limitEvents();
        removeCheckIcon();
        setupTimeSelector();

        // Set up mutation observer
        const observer = new MutationObserver((mutations) => {
          let needsUpdate = false;

          // Check if we need updates based on mutations
          for (const mutation of mutations) {
            if (mutation.type === 'childList' ||
                (mutation.type === 'characterData' &&
                 mutation.target.nodeValue &&
                 mutation.target.nodeValue.includes('Incident'))) {
              needsUpdate = true;
              break;
            }
          }

          if (needsUpdate || !replacementsApplied) {
            convertDatesToUTC();
            addPastIncidentsId();
            replaceIncidentsWithEvents();
            limitEvents();
            removeCheckIcon();
            setupTimeSelector();
          }
        });

        observer.observe(document.body, {
          childList: true,
          subtree: true,
          characterData: true,
          attributes: true,
          attributeFilter: ['href', 'textContent', 'innerText']
        });

        // Backup polling mechanism
        const backupInterval = setInterval(() => {
          if (document.body.innerHTML.includes('Incident')) {
            replaceIncidentsWithEvents();
          } else if (replacementsApplied) {
            // If we've done replacements and no more "Incident" text exists,
            // we can stop the backup interval
            clearInterval(backupInterval);
          }
        }, 1000); // Check every second

        // Stop backup polling after 30 seconds to save resources
        setTimeout(() => {
          clearInterval(backupInterval);
        }, 30000);
      }

      // Wait for document load
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializePageModifications);
      } else {
        initializePageModifications();
      }

      // Handle page transitions in SPA
      window.addEventListener('popstate', () => {
        setTimeout(() => {
          replaceIncidentsWithEvents();
          setupTimeSelector(); // Add our new function
        }, 100);
      });

      // Also handle clicks that might trigger SPA navigation
      document.addEventListener('click', (e) => {
        if (e.target.tagName === 'A' || e.target.closest('a')) {
          setTimeout(() => {
            replaceIncidentsWithEvents();
            setupTimeSelector(); // Add our new function
          }, 100);
        }
      });
    })();
  customHeadHtml: |
    <style>

      /* io style */
      body, dd, h1, h2, h3, h4, h5, h6, a, footer.svelte-jbr799, .logo.svelte-a08hsz.svelte-a08hsz, a.svelte-a08hsz.svelte-a08hsz {
        font-family: Inter, sans-serif !important;
      }

      h1 {
        font-size: 34px !important;
        font-weight: 400 !important;
        letter-spacing: 0.25px !important;
        line-height: 1.235 !important;
      }

      h2, h3, h4, h5, h6 {
        font-weight: 400 !important;
        letter-spacing: 0.25px !important;
        line-height: 1.235 !important;
      }

      a, footer.svelte-jbr799, .logo.svelte-a08hsz.svelte-a08hsz, a.svelte-a08hsz.svelte-a08hsz {
        font-size: 16px !important;
        font-weight: 400 !important;
        letter-spacing: 0.15px !important;
        line-height: 1.5 !important;
      }

      .logo.svelte-a08hsz.svelte-a08hsz, a.svelte-a08hsz.svelte-a08hsz {
        color: #FFFFFF !important;
      }

      a, footer.svelte-jbr799 {
        width: 100% !important;
      }

      nav.svelte-a08hsz.svelte-a08hsz {
        background: #008284 !important;
      }

      article.up, section.live-status article.up {
        border-left-color: #004E50 !important;
        background: #20bf6b !important;
      }

      article.down, section.live-status article.down, article.down.down-active,
      html body div#sapper main.container section article.down.link {
        border-color: #8c111e !important;
        background: #F75C65 !important;
      }
      /* io style */

      /* Position the articles relatively to allow absolute positioning of status icons */
      section.live-status.svelte-fqsq6s article.link {
        position: relative;
      }

      /* Add checkmark to the far right of up articles in live-status section */
      section.live-status.svelte-fqsq6s article.up.link::after {
        content: "✅";
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 16px;
      }

      /* Add alert mark to the far right of down articles in live-status section */
      section.live-status.svelte-fqsq6s article.down.link::after {
        content: "❗";
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 16px;
      }

      /* Add warning mark to the far right of degraded articles in live-status section */
      section.live-status.svelte-fqsq6s article.degraded.link::after {
        content: "⚠️";
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 16px;
      }

      .logo > div:nth-child(2) {
        padding-left: 2.5em;
      }

      html {
        scroll-padding-top: 70px; /* Adjust based on your header height */
      }

      /* Add navbar styling */
    .container.svelte-a08hsz.svelte-a08hsz {
      justify-content: left !important;
    }

    section article.down,
    section.live-status article.down,
    article.down.down-active {
      border-color: var(--down-border-left-color) !important;
      background: var(--down-background-color) !important;
    }

    article.degraded,
    section article.degraded,
    main article.degraded.degraded-active,
    section article.degraded.link {
      border-color: #693A00 !important;
      background: #FF9604 !important;
    }

    /* Hide specified div elements */
    article.down:nth-child(1) > div:nth-child(3),
    article.down:nth-child(2) > div:nth-child(3),
    article.down:nth-child(3) > div:nth-child(3),
    article.down:nth-child(4) > div:nth-child(3),
    article.down:nth-child(5) > div:nth-child(3),
    article.up:nth-child(1) > div:nth-child(3),
    article.link:nth-child(2) > div:nth-child(3),
    article.up:nth-child(3) > div:nth-child(3),
    article.up:nth-child(4) > div:nth-child(3),
    article.up:nth-child(5) > div:nth-child(3) {
      display: none;
    }

    /* Make h4 links not clickable */
    article.up:nth-child(1) > h4:nth-child(1) > a:nth-child(2),
    article.link:nth-child(2) > h4:nth-child(1) > a:nth-child(2),
    article.up:nth-child(3) > h4:nth-child(1) > a:nth-child(2),
    article.up:nth-child(4) > h4:nth-child(1) > a:nth-child(2),
    article.up:nth-child(5) > h4:nth-child(1) > a:nth-child(2) {
      pointer-events: none;
      text-decoration: none;
      color: inherit;
      cursor: default;
    }

    /* Hide backgrounds for service status sections */
    section h4,
    section h4 a.svelte-fqsq6s,
    section div .data.svelte-fqsq6s,
    section div {
      background: transparent !important;
    }

    /* Remove any potential background from parent containers */
    section.live-status article,
    section.live-status article div {
      background: transparent !important;
    }

    /* Hide specific labels in form */
    form.f > div:nth-child(2) > label:nth-child(2),
    form.f > div:nth-child(3) > label:nth-child(2),
    form.f > div:nth-child(4) > label:nth-child(2),
    form.f > div:nth-child(5) > label:nth-child(2) {
      display: none;
    }

    </style>

user-agent: "liquibot"

i18n:
  footer: © 2025 Liquibase
