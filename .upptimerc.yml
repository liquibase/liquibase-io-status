# Change these first
owner: liquibase # Your GitHub organization or username, where this repository lives
repo: liquibase-io-status # The name of this repository

sites:
  - name: Liquibase IO API
    url: $LIQUIBASE_IO_API_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 10000
  - name: Liquibase IO WEB
    url: $LIQUIBASE_IO_MAIN_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 10000
  - name: Liquibase IO Runner
    url: $LIQUIBASE_IO_RUNNER_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 7000
  - name: Liquibase IO Dispatcher
    url: $LIQUIBASE_IO_DISPATCHER_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 7000
  - name: Liquibase IO Connection Tester
    url: $LIQUIBASE_IO_CONNECTION_TESTER_URL
    icon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
    maxResponseTime: 7000

assignees: # Users to assign downtime issues (optional)
  - jandroav

skipDeleteIssues: true

status-website:
  navbar:
    - title: History
      href: /#history
  theme: light
  favicon: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.png
  faviconSvg: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_fav.svg
  # Add your custom domain name, or remove the `cname` line if you don't have a domain
  # Uncomment the `baseUrl` line if you don't have a custom domain and add your repo name there
  cname: status.liquibase.io
  # baseUrl: /your-repo-name
  logoUrl: https://raw.githubusercontent.com/liquibase/liquibase-io-status/master/static/img/liquibase_white.svg
  name: Status
  introTitle: "Current Status"
  introMessage: "Monitor availability and performance of Liquibase IO"
  js: |
    (function() {
      // Safe element selector that won't fail if element doesn't exist
      function safeQuerySelector(selector) {
        try {
          return document.querySelector(selector);
        } catch(e) {
          console.warn('Error querying for', selector, e);
          return null;
        }
      }
      
      // Safe element selector for multiple elements that won't fail
      function safeQuerySelectorAll(selector) {
        try {
          return document.querySelectorAll(selector);
        } catch(e) {
          console.warn('Error querying for all', selector, e);
          return [];
        }
      }
      
      // Safe function to modify text nodes
      function safeReplaceText(element, search, replace) {
        if (!element || !element.nodeValue) return false;
        try {
          element.nodeValue = element.nodeValue.replace(new RegExp(search, 'g'), replace);
          return true;
        } catch(e) {
          console.warn('Error replacing text', e);
          return false;
        }
      }
  
      // Track whether replacements have been applied
      let replacementsApplied = false;
  
      function addPastIncidentsId() {
        const h2Elements = safeQuerySelectorAll('h2');
        if (!h2Elements.length) return;
        
        for (const h2 of h2Elements) {
          if (!h2 || !h2.textContent) continue;
          
          if (h2.textContent === 'Past Incidents' || h2.textContent === 'Past Events') {
            h2.id = 'history';
            if (h2.textContent === 'Past Incidents') {
              h2.textContent = 'Past Events';
            }
          }
        }
      }
  
      function convertDatesToUTC() {
        try {
          // Convert dates in dd elements
          const dateElements = safeQuerySelectorAll('dd');
          dateElements.forEach(el => {
            if (!el || !el.innerText) return;
            
            if (el.innerText.includes('/')) {
              try {
                const date = new Date(el.innerText);
                if (!isNaN(date.getTime())) {
                  el.innerText = date.toUTCString().replace('GMT', 'UTC');
                }
              } catch(e) {
                console.warn('Error converting date', el.innerText, e);
              }
            }
          });
  
          // Convert dates in incident headers
          const incidentDivs = safeQuerySelectorAll('div.f div');
          incidentDivs.forEach(div => {
            if (!div || !div.innerText) return;
            
            const text = div.innerText;
            if (text.includes('Opened at')) {
              const dateMatch = text.match(/Opened at (.*?) with/);
              if (dateMatch && dateMatch[1]) {
                try {
                  const date = new Date(dateMatch[1]);
                  if (!isNaN(date.getTime())) {
                    div.innerText = text.replace(dateMatch[1], date.toUTCString().replace('GMT', 'UTC'));
                  }
                } catch(e) {
                  console.warn('Error converting incident date', dateMatch[1], e);
                }
              }
            }
          });
        } catch(e) {
          console.warn('Error in date conversion', e);
        }
      }
  
      // Modified to be less aggressive with hiding elements
      function limitEvents() {
        try {
          // Get the Past Events section
          const pastEventsH2 = Array.from(safeQuerySelectorAll('h2')).find(
            h2 => h2.textContent === 'Past Events' || h2.textContent === 'Past Incidents'
          );
          
          if (!pastEventsH2) {
            console.warn('Past Events section not found');
            return;
          }
          
          // Find the section that contains past events
          const pastEventsSection = pastEventsH2.closest('section');
          if (!pastEventsSection) {
            console.warn('Past Events container section not found');
            return;
          }
          
          // Make sure the past events section is visible
          pastEventsH2.style.display = '';
          pastEventsSection.style.display = '';
          
          // No longer aggressively limiting the number of past events
          // This was likely causing the issue where past events weren't visible
        } catch(e) {
          console.warn('Error limiting events', e);
        }
      }
  
      function removeCheckIcon() {
        try {
          // Find all articles with "up" class
          const upArticles = safeQuerySelectorAll('article.up');
          
          // For each "up" article, remove the check mark emoji if it exists
          upArticles.forEach(article => {
            if (!article || !article.innerHTML) return;
            
            if (article.innerHTML.includes('✅')) {
              article.innerHTML = article.innerHTML.replace('✅ &nbsp;', '');
            }
          });
        } catch(e) {
          console.warn('Error removing check icon', e);
        }
      }
  
      function replaceIncidentsWithEvents() {
        try {
          replacementsApplied = false;
          let hasReplaced = false;
  
          // Handle h2 elements (section headers)
          const h2Elements = safeQuerySelectorAll('h2');
          h2Elements.forEach(h2 => {
            if (!h2 || !h2.textContent) return;
            
            if (h2.textContent === 'Past Incidents') {
              h2.textContent = 'Past Events';
              h2.id = 'history'; // Ensure ID is set for navigation
              hasReplaced = true;
            }
          });
  
          // Replace all occurrences of "Incident" with "Event" in text nodes
          const walker = document.createTreeWalker(
            document.body,
            NodeFilter.SHOW_TEXT,
            null,
            false
          );
  
          let textNode;
          while (textNode = walker.nextNode()) {
            if (textNode.nodeValue && textNode.nodeValue.includes('Incident')) {
              safeReplaceText(textNode, 'Incident', 'Event');
              hasReplaced = true;
            }
          }
  
          // Replace in link text
          const links = safeQuerySelectorAll('a');
          links.forEach(link => {
            if (!link || !link.textContent) return;
            
            if (link.textContent.includes('Incident')) {
              link.textContent = link.textContent.replace(/Incident/g, 'Event');
              hasReplaced = true;
            }
          });
  
          if (hasReplaced) {
            replacementsApplied = true;
          }
  
          return hasReplaced;
        } catch(e) {
          console.warn('Error replacing incidents with events', e);
          return false;
        }
      }
  
      function setupTimeSelector() {
        try {
          // Wait for the form to be available
          const checkForm = setInterval(() => {
            const form = safeQuerySelector('form.f.r');
            if (!form) return;
            
            clearInterval(checkForm);
            
            // Select the 24h (day) option
            const dayOption = document.getElementById('data_day');
            if (dayOption) {
              dayOption.checked = true;
              
              // Trigger a change event to update graphs
              try {
                const event = new Event('change', {
                  bubbles: true,
                  cancelable: true
                });
                dayOption.dispatchEvent(event);
              } catch(e) {
                console.warn('Error dispatching event', e);
              }
            }
            
            // Add a class to the form to trigger our CSS hiding other options
            form.classList.add('day-only');
          }, 100);
          
          // Safety - clear interval after 10 seconds max
          setTimeout(() => {
            clearInterval(checkForm);
          }, 10000);
        } catch(e) {
          console.warn('Error setting up time selector', e);
        }
      }
  
      // Function to ensure Past Events section is visible
      function ensurePastEventsVisible() {
        try {
          // Find the Past Events heading
          const pastEventsH2 = Array.from(safeQuerySelectorAll('h2')).find(
            h2 => h2.textContent === 'Past Events' || h2.textContent === 'Past Incidents'
          );
          
          if (pastEventsH2) {
            // Make sure it's visible
            pastEventsH2.style.display = '';
            
            // Make the parent section visible
            const section = pastEventsH2.closest('section');
            if (section) {
              section.style.display = '';
              
              // Make all date headers visible
              const h3Elements = section.querySelectorAll('h3');
              h3Elements.forEach(h3 => {
                h3.style.display = '';
              });
              
              // Make all articles (events) visible
              const articles = section.querySelectorAll('article');
              articles.forEach(article => {
                article.style.display = '';
              });
            }
            
            console.log('Past Events section found and made visible');
          } else {
            console.warn('Past Events section not found');
          }
        } catch(e) {
          console.warn('Error ensuring Past Events visibility', e);
        }
      }
  
      // Initial run and setup observer
      function initializePageModifications() {
        try {
          // Perform initial modifications after a delay to ensure page is loaded
          setTimeout(() => {
            convertDatesToUTC();
            addPastIncidentsId();
            replaceIncidentsWithEvents();
            removeCheckIcon();
            setupTimeSelector();
            ensurePastEventsVisible(); // Make sure past events are visible
          }, 800); // Give more time for the page to fully render
  
          // Set up mutation observer with error handling
          try {
            const observer = new MutationObserver((mutations) => {
              try {
                let needsUpdate = false;
  
                // Check if we need updates based on mutations
                for (const mutation of mutations) {
                  if (mutation.type === 'childList' ||
                      (mutation.type === 'characterData' &&
                       mutation.target.nodeValue &&
                       mutation.target.nodeValue.includes('Incident'))) {
                    needsUpdate = true;
                    break;
                  }
                }
  
                if (needsUpdate || !replacementsApplied) {
                  convertDatesToUTC();
                  addPastIncidentsId();
                  replaceIncidentsWithEvents();
                  removeCheckIcon();
                  ensurePastEventsVisible(); // Make sure past events are visible
                }
              } catch(e) {
                console.warn('Error in mutation observer callback', e);
              }
            });
  
            observer.observe(document.body, {
              childList: true,
              subtree: true,
              characterData: true,
              attributes: true,
              attributeFilter: ['href', 'textContent', 'innerText', 'style']
            });
          } catch(e) {
            console.warn('Error setting up mutation observer', e);
          }
  
          // Additional check after a longer delay to catch slow-loading content
          setTimeout(() => {
            ensurePastEventsVisible();
          }, 2000);
  
          // Periodically check that past events are visible
          const visibilityInterval = setInterval(() => {
            ensurePastEventsVisible();
          }, 5000); // Check every 5 seconds
  
          // Stop the interval after 60 seconds
          setTimeout(() => {
            clearInterval(visibilityInterval);
          }, 60000);
        } catch(e) {
          console.warn('Error initializing page modifications', e);
        }
      }
  
      // Wait for document load
      try {
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initializePageModifications);
        } else {
          initializePageModifications();
        }
  
        // Handle page transitions in SPA
        window.addEventListener('popstate', () => {
          setTimeout(() => {
            try {
              replaceIncidentsWithEvents();
              setupTimeSelector();
              ensurePastEventsVisible();
            } catch(e) {
              console.warn('Error handling popstate event', e);
            }
          }, 800);
        });
  
        // Also handle clicks that might trigger SPA navigation
        document.addEventListener('click', (e) => {
          if (e.target.tagName === 'A' || e.target.closest('a')) {
            setTimeout(() => {
              try {
                replaceIncidentsWithEvents();
                setupTimeSelector();
                ensurePastEventsVisible();
              } catch(e) {
                console.warn('Error handling click event', e);
              }
            }, 800);
          }
        });
      } catch(e) {
        console.warn('Error setting up event listeners', e);
      }
    })();
  customHeadHtml: |
    <style>

      /* io style */
      body, dd, h1, h2, h3, h4, h5, h6, a, footer.svelte-jbr799, .logo.svelte-a08hsz.svelte-a08hsz, a.svelte-a08hsz.svelte-a08hsz {
        font-family: Inter, sans-serif !important;
      }

      h1 {
        font-size: 34px !important;
        font-weight: 400 !important;
        letter-spacing: 0.25px !important;
        line-height: 1.235 !important;
      }

      h2, h3, h4, h5, h6 {
        font-weight: 400 !important;
        letter-spacing: 0.25px !important;
        line-height: 1.235 !important;
      }

      a, footer.svelte-jbr799, .logo.svelte-a08hsz.svelte-a08hsz, a.svelte-a08hsz.svelte-a08hsz {
        font-size: 16px !important;
        font-weight: 400 !important;
        letter-spacing: 0.15px !important;
        line-height: 1.5 !important;
      }

      .logo.svelte-a08hsz.svelte-a08hsz, a.svelte-a08hsz.svelte-a08hsz {
        color: #FFFFFF !important;
      }

      a, footer.svelte-jbr799 {
        width: 100% !important;
      }

      nav.svelte-a08hsz.svelte-a08hsz {
        background: #008284 !important;
      }

      article.up, section.live-status article.up {
        border-left-color: #004E50 !important;
        background: #20bf6b !important;
      }

      article.down, section.live-status article.down, article.down.down-active,
      html body div#sapper main.container section article.down.link {
        border-color: #8c111e !important;
        background: #F75C65 !important;
      }
      /* io style */

      /* Position the articles relatively to allow absolute positioning of status icons */
      section.live-status.svelte-fqsq6s article.link {
        position: relative;
      }

      /* Add checkmark to the far right of up articles in live-status section */
      section.live-status.svelte-fqsq6s article.up.link::after {
        content: "✅";
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 16px;
      }

      /* Add alert mark to the far right of down articles in live-status section */
      section.live-status.svelte-fqsq6s article.down.link::after {
        content: "❗";
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 16px;
      }

      /* Add warning mark to the far right of degraded articles in live-status section */
      section.live-status.svelte-fqsq6s article.degraded.link::after {
        content: "⚠️";
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 16px;
      }

      .logo > div:nth-child(2) {
        padding-left: 2.5em;
      }

      html {
        scroll-padding-top: 70px; /* Adjust based on your header height */
      }

      /* Add navbar styling */
    .container.svelte-a08hsz.svelte-a08hsz {
      justify-content: left !important;
    }

    section article.down,
    section.live-status article.down,
    article.down.down-active {
      border-color: var(--down-border-left-color) !important;
      background: var(--down-background-color) !important;
    }

    article.degraded,
    section article.degraded,
    main article.degraded.degraded-active,
    section article.degraded.link {
      border-color: #693A00 !important;
      background: #FF9604 !important;
    }

    /* Hide specified div elements */
    article.down:nth-child(1) > div:nth-child(3),
    article.down:nth-child(2) > div:nth-child(3),
    article.down:nth-child(3) > div:nth-child(3),
    article.down:nth-child(4) > div:nth-child(3),
    article.down:nth-child(5) > div:nth-child(3),
    article.up:nth-child(1) > div:nth-child(3),
    article.link:nth-child(2) > div:nth-child(3),
    article.up:nth-child(3) > div:nth-child(3),
    article.up:nth-child(4) > div:nth-child(3),
    article.up:nth-child(5) > div:nth-child(3) {
      display: none;
    }

    /* Make h4 links not clickable */
    article.up:nth-child(1) > h4:nth-child(1) > a:nth-child(2),
    article.link:nth-child(2) > h4:nth-child(1) > a:nth-child(2),
    article.up:nth-child(3) > h4:nth-child(1) > a:nth-child(2),
    article.up:nth-child(4) > h4:nth-child(1) > a:nth-child(2),
    article.up:nth-child(5) > h4:nth-child(1) > a:nth-child(2) {
      pointer-events: none;
      text-decoration: none;
      color: inherit;
      cursor: default;
    }

    /* Hide backgrounds for service status sections */
    section h4,
    section h4 a.svelte-fqsq6s,
    section div .data.svelte-fqsq6s,
    section div {
      background: transparent !important;
    }

    /* Remove any potential background from parent containers */
    section.live-status article,
    section.live-status article div {
      background: transparent !important;
    }

    /* Hide specific labels in form */
    form.f > div:nth-child(2) > label:nth-child(2),
    form.f > div:nth-child(3) > label:nth-child(2),
    form.f > div:nth-child(4) > label:nth-child(2),
    form.f > div:nth-child(5) > label:nth-child(2) {
      display: none;
    }

    </style>

user-agent: "liquibot"

i18n:
  footer: © 2025 Liquibase
